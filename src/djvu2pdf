#!/usr/bin/env bash

#
# For benchmarking
#

start_ms=`date +%s%N | cut -b1-13`

#
# Set up paths
#

initial_directory=$(pwd)
file_in=$(readlink -f "$1")
file_out=$(readlink -f "$2")
file_out_basename=$(basename "$file_out")

#
# Set up the temporary storage
#

tmpdir=$(mktemp -d)
cd $tmpdir
#echo -e "Created temporary directory - ${tmpdir}\n"

function cleanup()
{
    rm -rf $tmpdir
    cd $initial_directory
}
trap "cleanup" EXIT # makes sure we clean up after ourselves

#
# Extract raw pages and text
#

#echo -e "Convert source file ${file_in} to multi-page tiff image file.\n"
ddjvu -format=tiff "$file_in" tmp_multipage.tiff
#echo -e "Split multi-page image file to pages.\n"
tiffsplit tmp_multipage.tiff tmp_page_
#echo -e "Removing source multi-page tiff file.\n"
rm tmp_multipage.tiff
num_pages=$(djvused -e 'n' "$file_in")
#echo -e "Pages count: ${num_pages}\n"
strlen_num_pages="${#num_pages}"
i=0
for page_alpha in tmp_page_*; do
    i=$[i+1]
    j=$(printf "%0${strlen_num_pages}d" $i)
    mv $page_alpha tmp_page_${j}.tiff

    # OCR content needs to have one html file per page for `pdfbeads`;
    # `djvu2hocr` is capable of extracting it all at once, but then it
    # goes into one big file which we would need to split afterwards,
    # this would require html parsing, which is just too much.  The
    # s/ocrx/ocr/g substitution is a small hack to make `pdfbeads`
    # understand the output from `djvu2hocr`.

    out_html=tmp_page_${j}.html
#    echo -e "OCR text from page #${i} and save to ${out_html}\n"
    djvu2hocr "$file_in" -p $i | sed 's/ocrx/ocr/g' > ${out_html}
done

#
# Generate the TOC
#

djvused -e 'print-outline' "$file_in" > toc.txt

# The output returned by `djvused` has an s-expression like
# tree structure, which is incompatible with the indentation based
# structure used by `pdfbeads`

/var/local/src/djvu2pdf_toc_parser.py < toc.txt > toc.out.txt


#
# Generate the final PDF
#

pdfbeads --toc toc.out.txt -o output.pdf
mv output.pdf "$file_out"

current_ms=`date +%s%N | cut -b1-13`
time_spent=$((current_ms-start_ms))
echo -e "It takes ${time_spent}ms\n"
